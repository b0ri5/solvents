#!/usr/bin/env python

import collections
import os

print('.PHONY: all clean test')
print()

targets = []
for root, dirs, files in os.walk('.'):
  if root.startswith('./.') or \
     root.startswith('./build') or \
     root.startswith('./lang') or \
     root.startswith('./dist') or \
     root.startswith('./third_party') or \
     '__pycache__' in root or \
     root == '.':
    continue
  ccprefixes = collections.defaultdict(list)
  for file in files:
    if file.endswith('_test.cc'):
      ccprefixes[file[:-len('_test.cc')]].append(file)
    elif file.endswith('.cc'):
      ccprefixes[file[:-len('.cc')]].append(file)
    elif file.endswith('.h'):
      ccprefixes[file[:-len('.h')]].append(file)
    
  for prefix, ccfiles in ccprefixes.items():
    code, header, test = sorted(ccfiles) # The _test will always come last
    clean_root = root[len('./'):]
    binary_path = os.path.join(clean_root, prefix + '_test')
    header_path = os.path.join(clean_root, header)
    code_path = os.path.join(clean_root, code)
    obj_path = os.path.splitext(code_path)[0] + '.o'
    test_path = os.path.join(clean_root, test)
    gtest_includepath = 'third_party/gtest-1.7.0/include'
    gtest_libpath = 'third_party/gtest-1.7.0'
    fmtdict = {'binary_path': binary_path,
               'code_path': code_path,
               'obj_path': obj_path,
               'header_path': header_path,
               'test_path': test_path,
               'gtest_includepath': gtest_includepath,
               'gtest_libpath': gtest_libpath}
    
    print('{binary_path}: {header_path} {code_path} {test_path}'.format(**fmtdict))
    print('\t${{CXX}} {code_path} -o {obj_path} -c \\'.format(**fmtdict))
    print('\t        -Werror -Weverything -std=c++11 \\')
    print('\t        -fsanitize=address -fsanitize=undefined')
    print('\t${{CXX}} {test_path} {obj_path} -o {binary_path} \\'.format(**fmtdict))
    print('\t        -isystem {gtest_includepath} -L {gtest_libpath} -lgtest -lgtest_main -pthread \\'.format(**fmtdict))
    print('\t        -Werror -Weverything -Wno-global-constructors -std=c++11 \\')
    print('\t        -fsanitize=address -fsanitize=undefined')
    print()
    targets.append('{root}/{prefix}_test'.format(root=clean_root, prefix=prefix))

print('all: ' + (' \\\n' + ' ' * len('all: ')).join(sorted(targets)))
print()
print('clean:')
print('\trm ' + ' \\\n\t   '.join(sorted(targets)))
print()
print('test: all')
print('\t' + '\n\t'.join(sorted(targets)))
