# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
orbs:
  renovate: daniel-shuy/renovate@3.0.0
jobs:
  test:
    # Use a machine executor because it most easily supports multiple languages
    machine:
      # See https://circleci.com/docs/2.0/configuration-reference/#available-machine-images for the list of images
      image: ubuntu-2004:202107-02
    steps:
      - checkout
      # Install bazelisk. See https://github.com/bazelbuild/bazelisk#requirements
      - run: go get github.com/bazelbuild/bazelisk
      - run: bazelisk test --test_output=errors //...
  check-buildifier:
    docker:
      # See https://circleci.com/developer/images/image/cimg/node for a list of images
      - image: cimg/node:16.8.0@sha256:4caa18dfb1130e60f25eaf980cb90f92e50f3c40f20ecd95394d5de0567d6c62
    steps:
      - checkout
      - run: yarn install --frozen-lockfile --non-interactive
      - run: .circleci/check_buildifier
      - run:
          command: echo "Run .circleci/fix_buildifier"
          when: on_fail
  check-typescript:
    docker:
      # See https://circleci.com/developer/images/image/cimg/node for a list of images
      - image: cimg/node:16.8.0@sha256:4caa18dfb1130e60f25eaf980cb90f92e50f3c40f20ecd95394d5de0567d6c62
    steps:
      - checkout
      - run: yarn install --frozen-lockfile --non-interactive
      - run: .circleci/check_typescript
      - run:
          command: echo "Run .circleci/fix_typescript"
          when: on_fail
  check-json:
    docker:
      # See https://circleci.com/developer/images/image/cimg/python for a list of images
      - image: cimg/python:3.9.7@sha256:9833615c8c454c09f71a629e83507ebdc98d8bc4c69a7c0a567dc89aeac8b3bf
    steps:
      - checkout
      - run: .circleci/check_json
      - run:
          command: echo "Run .circleci/fix_json"
          when: on_fail
  check-cc:
    docker:
      # See https://circleci.com/developer/images/image/cimg/node for a list of images
      - image: cimg/node:16.8.0@sha256:4caa18dfb1130e60f25eaf980cb90f92e50f3c40f20ecd95394d5de0567d6c62
    steps:
      - checkout
      - run: yarn install --frozen-lockfile --non-interactive
      - run: |
          find . -name *.h -o -name *.cc | xargs yarn clang-format --Werror -n -style="{BasedOnStyle: Google, Language: Cpp}"
      - run:
          command: |
            echo "Run find . -name *.h -o -name *.cc | xargs yarn clang-format -i -style=\"{BasedOnStyle: Google, Language: Cpp}\""
          when: on_fail
  check-java:
    docker:
      # See https://circleci.com/developer/images/image/cimg/openjdk for a list of images
      - image: cimg/openjdk:16.0.2@sha256:224097af1d0a915f807a14031e2d6bce0536f9dd4431018ff7d898e7e5747379
    steps:
      - checkout
      - run: |
          wget https://github.com/google/google-java-format/releases/download/v1.10.0/google-java-format-1.10.0-all-deps.jar
          find . -name *.java | xargs java --add-exports jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED --add-exports jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED --add-exports jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED --add-exports jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED --add-exports jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED -jar google-java-format-1.10.0-all-deps.jar --dry-run --set-exit-if-changed
      - run:
          command: |
            echo "Run find . -name *.java | xargs java -jar google-java-format-1.10.0-all-deps.jar --replace
          when: on_fail
  check-shell:
    docker:
      # See https://circleci.com/developer/images/image/cimg/base for a list of images
      - image: cimg/base:2021.07@sha256:975215e37934a69efbe1a886c70b09402ca8a6ccd027efa1ef4df5d55132e687
    steps:
      - checkout
      - run: sudo apt-get update
      - run: sudo apt-get install shellcheck
      - run: shellcheck tools/start_solution
  check-python:
    docker:
      # See https://circleci.com/developer/images/image/cimg/python for a list of images
      - image: cimg/python:3.9.7@sha256:9833615c8c454c09f71a629e83507ebdc98d8bc4c69a7c0a567dc89aeac8b3bf
    steps:
      - checkout
      - run: pip install pylint
      - run: find . -name *.py | xargs pylint --indent-string='  ' --disable=missing-docstring --disable=too-many-public-methods

workflows:
  test-workflow:
    jobs:
      - check-buildifier
      - check-cc
      - check-java
      - check-json
      - check-python
      - check-shell
      - check-typescript
      - renovate/validate-config
      - test
