# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
orbs:
  renovate: daniel-shuy/renovate@3.1.0
jobs:
  test:
    # Use a machine executor because it most easily supports multiple languages
    machine:
      # See https://circleci.com/docs/2.0/configuration-reference/#available-machine-images for the list of images
      image: ubuntu-2204:2023.10.1
    steps:
      - checkout
      # Output the latest version of python for debugging info in case the next step fails
      - run: pyenv versions
      # Use the latest version of python available as reported via "pyenv versions"
      - run: pyenv global 3.11.5
      # Install bazelisk. See https://github.com/bazelbuild/bazelisk#requirements
      - run: go install github.com/bazelbuild/bazelisk@latest
      - run: bazelisk test --test_output=errors //...
  check-buildifier:
    docker:
      # See https://circleci.com/developer/images/image/cimg/node for a list of images
      - image: cimg/node:17.9.1@sha256:672e6db46d85bb5f2d5f301a612635ff1d2563303710b4e699d521f620b1bb6e
    steps:
      - checkout
      - run: yarn install --frozen-lockfile --non-interactive
      - run: .circleci/check_buildifier
      - run:
          command: echo "Run .circleci/fix_buildifier"
          when: on_fail
  check-typescript:
    docker:
      # See https://circleci.com/developer/images/image/cimg/node for a list of images
      - image: cimg/node:17.9.1@sha256:672e6db46d85bb5f2d5f301a612635ff1d2563303710b4e699d521f620b1bb6e
    steps:
      - checkout
      - run: yarn install --frozen-lockfile --non-interactive
      - run: .circleci/check_typescript
      - run:
          command: echo "Run .circleci/fix_typescript"
          when: on_fail
  check-json:
    docker:
      # See https://circleci.com/developer/images/image/cimg/python for a list of images
      - image: cimg/python:3.11.5@sha256:5eb03f6b4a6dbc1f1abe9c51e6b7cff571ea0ff69ff793e83b7b633efaaa66e9
    steps:
      - checkout
      - run: .circleci/check_json
      - run:
          command: echo "Run .circleci/fix_json"
          when: on_fail
  check-cc:
    docker:
      # See https://circleci.com/developer/images/image/cimg/node for a list of images
      - image: cimg/node:17.9.1@sha256:672e6db46d85bb5f2d5f301a612635ff1d2563303710b4e699d521f620b1bb6e
    steps:
      - checkout
      - run: yarn install --frozen-lockfile --non-interactive
      - run: |
          find . -name "*.h" -o -name "*.cc" | xargs yarn clang-format --Werror -n -style="{BasedOnStyle: Google, Language: Cpp}"
      - run:
          command: |
            echo "Run find . -name "*.h" -o -name "*.cc" | xargs yarn clang-format -i -style=\"{BasedOnStyle: Google, Language: Cpp}\""
          when: on_fail
  check-java:
    docker:
      # See https://circleci.com/developer/images/image/cimg/openjdk for a list of images
      - image: cimg/openjdk:17.0.9@sha256:e43486fd029dd851d121da42df9121b260164bc5dd1e4f63122ac8cfd61ad7ea
    steps:
      - checkout
      - run: |
          wget https://github.com/google/google-java-format/releases/download/v1.10.0/google-java-format-1.10.0-all-deps.jar
          find . -name "*.java" | xargs java --add-exports jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED --add-exports jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED --add-exports jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED --add-exports jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED --add-exports jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED -jar google-java-format-1.10.0-all-deps.jar --dry-run --set-exit-if-changed
      - run:
          command: |
            echo "Run find . -name "*.java" | xargs java -jar google-java-format-1.10.0-all-deps.jar --replace"
          when: on_fail
  check-shell:
    docker:
      # See https://circleci.com/developer/images/image/cimg/base for a list of images
      - image: cimg/base:2021.12@sha256:9d94b570bdd6809833d5e12d2ca1cb56de77d71dfe1d7e2fe44070b7fbbed048
    steps:
      - checkout
      - run: sudo apt-get update
      - run: sudo apt-get install shellcheck
      - run: shellcheck tools/start_solution
  check-python:
    docker:
      # See https://circleci.com/developer/images/image/cimg/python for a list of images
      - image: cimg/python:3.11.5@sha256:5eb03f6b4a6dbc1f1abe9c51e6b7cff571ea0ff69ff793e83b7b633efaaa66e9
    steps:
      - checkout
      - run: pip install -r requirements_lock.txt
      - run: pip install pylint
      - run: find . -name "*.py" | xargs pylint --disable=missing-docstring --disable=too-many-public-methods
  # See https://github.com/google/yapf
  check-yapf:
    docker:
      # See https://circleci.com/developer/images/image/cimg/python for a list of images
      - image: cimg/python:3.11.5@sha256:5eb03f6b4a6dbc1f1abe9c51e6b7cff571ea0ff69ff793e83b7b633efaaa66e9
    steps:
      - checkout
      - run: pip install yapf
      - run: find . -name "*.py" | xargs yapf --parallel --style google --diff
      - run:
          command: |
            echo "Run find . -name "*.py" | xargs yapf --parallel --style google --in-place"
          when: on_fail


workflows:
  test-workflow:
    jobs:
      - check-buildifier
      - check-cc
      - check-java
      - check-json
        #      Disable this until I can figure out how to get it to work or replace it.
        #      - check-python
      - check-shell
      - check-typescript
      - check-yapf
      - renovate/validate-config
      - test
