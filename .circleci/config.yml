# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
jobs:
  test:
    # Use a machine executor because it most easily supports multiple languages
    machine:
      # See https://circleci.com/docs/2.0/configuration-reference/#machine for the list of images
      image: ubuntu-1604:202004-01
    steps:
      - checkout
      # Install bazelisk. See https://github.com/bazelbuild/bazelisk#requirements
      - run: go get github.com/bazelbuild/bazelisk
      - run: bazelisk test --test_output=errors //...
  check-buildifier:
    docker:
      # See https://circleci.com/docs/2.0/docker-image-tags.json for a list of images
      - image: circleci/node:14.14.0@sha256:d1a4851f57dc6d2e4dce8de575d93489c9db700989b29a004017760170ee92d4
    steps:
      - checkout
      - run: yarn install --frozen-lockfile --non-interactive
      - run: .circleci/check_buildifier
      - run:
          command: echo "Run .circleci/fix_buildifier"
          when: on_fail
  check-typescript:
    docker:
      # See https://circleci.com/docs/2.0/docker-image-tags.json for a list of images
      - image: circleci/node:14.14.0@sha256:d1a4851f57dc6d2e4dce8de575d93489c9db700989b29a004017760170ee92d4
    steps:
      - checkout
      - run: yarn install --frozen-lockfile --non-interactive
      - run: .circleci/check_typescript
      - run:
          command: echo "Run .circleci/fix_typescript"
          when: on_fail
  check-json:
    docker:
      # See https://circleci.com/docs/2.0/docker-image-tags.json for a list of images
      - image: circleci/python:3.9.0@sha256:cbfdded78b98c121791cb1bb038579e8f0b3227a702f5f40fbdab8c10af2c2fa
    steps:
      - checkout
      - run: .circleci/check_json
      - run:
          command: echo "Run .circleci/fix_json"
          when: on_fail
  check-cc:
    docker:
      # See https://circleci.com/docs/2.0/docker-image-tags.json for a list of images
      - image: circleci/node:14.14.0@sha256:d1a4851f57dc6d2e4dce8de575d93489c9db700989b29a004017760170ee92d4
    steps:
      - checkout
      - run: yarn install --frozen-lockfile --non-interactive
      - run: |
          find . -name *.h -o -name *.cc | xargs yarn clang-format --Werror -n -style="{BasedOnStyle: Google, Language: Cpp}"
      - run:
          command: |
            echo "Run find . -name *.h -o -name *.cc | xargs yarn clang-format -i -style=\"{BasedOnStyle: Google, Language: Cpp}\""
          when: on_fail
  check-java:
    docker:
      # See https://circleci.com/docs/2.0/docker-image-tags.json for a list of images
      - image: circleci/openjdk:14.0.2-buster@sha256:6e1b3a9fb6602885204373149bf3052ed8d0ba6e49f3836034c898d04c95be4e
    steps:
      - checkout
      - run: wget https://github.com/google/google-java-format/releases/download/google-java-format-1.8/google-java-format-1.8-all-deps.jar
      - run: find . -name *.java | xargs java -jar google-java-format-1.8-all-deps.jar --dry-run --set-exit-if-changed
      - run:
          command: |
            echo "Run find . -name *.java | xargs java -jar google-java-format-1.8-all-deps.jar --replace
          when: on_fail
  check-shell:
    docker:
      # See https://circleci.com/docs/2.0/docker-image-tags.json for a list of images
      - image: cimg/base:2020.10@sha256:d75b94c6eae6e660b6db36761709626b93cabe8c8da5b955bfbf7832257e4201
    steps:
      - checkout
      - run: sudo apt-get update
      - run: sudo apt-get install shellcheck
      - run: shellcheck tools/start_solution
  check-python:
    docker:
      # See https://circleci.com/docs/2.0/docker-image-tags.json for a list of images
      - image: circleci/python:3.9.0@sha256:cbfdded78b98c121791cb1bb038579e8f0b3227a702f5f40fbdab8c10af2c2fa
    steps:
      - checkout
      - run: pip install pylint
      - run: find . -name *.py | xargs pylint --indent-string='  ' --disable=missing-docstring --disable=too-many-public-methods
  check-go:
    docker:
      # See https://circleci.com/docs/2.0/docker-image-tags.json for a list of images
      - image: circleci/golang:latest@sha256:f9f1d30001e7bdf68e062537449074fb54a78ca214840cd58b3f1af86b0c35a5
    steps:
      - checkout
      # C++ files confuse vet
      - run: find . -name *.cc | xargs rm
      - run: go vet ./...

workflows:
  test-workflow:
    jobs:
      - check-buildifier
      - check-cc
      - check-go
      - check-java
      - check-json
      - check-python
      - check-shell
      - check-typescript
      - test
